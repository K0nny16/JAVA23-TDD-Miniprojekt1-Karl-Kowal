Uppgiftsbeskrivning: Enhetstestning med Red-Green-Refactor

Vi kommer att skapa enhetstester enligt principerna för Red-Green-Refactor. Du får två program att välja mellan för denna uppgift. Välj ett av dem att arbeta med. Båda programmen har vissa problem och behöver refaktoreras. En ny specifikation för varje program beskrivs senare i uppgiften.
Målet med Uppgiften

Skapa kod som överensstämmer med den nya specifikationen. Följ principerna för Red-Green-Refactor:

    Red: Börja med att skapa en testmetod som uppfyller ett av villkoren i specifikationen. Testet ska först misslyckas.
    Green: Implementera programkoden tills testet lyckas.
    Refactor: Förbättra koden utan att ändra dess funktionalitet.

Inlämningskrav

    Kod med minst 80 % testtäckning.
        Main-metoden behöver inte testas, men täckningen måste fortfarande vara minst 80 %.

    Kodstruktur:
        Organisera koden i minst två paket: Main och test.

    Tester bör inkludera (om relevant):
        Gränstester (boundary testing)
        Null-värden
        Undantag (exceptions)
        Inmatning och utmatning (input och output)
        Datatyper

    Använd Annotations:
        @DisplayName och @Test
        Andra relevanta annotations kan också användas.

    Namnkonventioner för tester:
        Testklasser ska namnges som motsvarande programklasser, med tillägget "Test".
            Exempel: Bil → BilTest
        Testmetoder ska beskriva vad som testas.
            Exempel: add() → addCheckNotANumber()

    Kort Beskrivning:
        En max 1-sidig beskrivning av lösningen, inkluderande viktiga tester, ändringar i programmet och eventuella svårigheter.
        En skärmbild av kodtäckningen för både programkod och testkod.

    All inlämnad kod och material ska laddas upp till Google Classroom.
        Namnge repot som: JAVA23-TDD-Miniprojekt1-fornamn-efternamn
            Exempel: JAVA23-TDD-Miniprojekt1-Muhannad-Satouf

Program 1: Prime Numbers
Programspecifikation: Räknare och Summerare för Primtal

Syfte: Programmet ska räkna och summera primtal inom det angivna intervallet 0 till 1000 och presentera resultaten på ett användarvänligt sätt.
Funktionalitet

    Räkning av Primtal:
        Identifiera och räkna primtal inom intervallet 0 till 1000.
        Lagra räkningen som ett heltal.

    Summering av Primtal:
        Beräkna summan av de identifierade primtalen.
        Lagra summan som ett heltal.

    Konsolutskrift:
        Visa antalet primtal och summan på ett lättläst sätt.
        Format för utskrift:
            "Hej, det finns <Antal> primtal mellan 0 och 1000!"
            "Och den totala summan av dessa primtal är <Summa>."

    Metoder för Konsolutskrift:
        Implementera två metoder: printCount() och printSum()

    Validering av Inmatning:
        Acceptera intervallevärden inom 0 till 1000 som inmatningsparametrar vid programmets start.
        Vid ogiltiga intervallvärden, visa ett felmeddelande:
            "Hoppsan, fel intervall angivet!"
        Vid ogiltiga intervallvärden ska algoritmen för primtalsberäkning inte utföras.

Data Lagring

    Använd heltalsvariabler för att lagra antalet och summan av primtalen.

Observera: Programmet ska prioritera enkelhet och användarvänlighet vid räkning och summering av primtal. Validering av inmatning ska förhindra användning av ogiltiga intervallvärden.